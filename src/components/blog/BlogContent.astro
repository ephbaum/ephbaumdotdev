---
import { Button } from '@eliancodes/brutal-ui';

interface Props {
  content: any;
}

const { content } = Astro.props;
---

<style>
  .author-color {
    color: var(--authorColor, #ff0000);
    background-color: var(--authorBgColor, #ffffff);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    border: 2px solid #000000;
    display: inline-block;
    font-weight: 600;
  }

  .author-color:hover {
    opacity: 0.8;
  }

  .published-color {
    color: var(--publishedColor, #0000ff);
    background-color: var(--publishedBgColor, #ffffff);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    border: 2px solid #000000;
    display: inline-block;
    font-weight: 600;
  }

  .published-color:hover {
    opacity: 0.8;
  }
</style>

<article class="prose-slate w-sm md:w-prose md:prose poppins">
  <Button href="/blog/" data-brutal-button data-brutal-hover>&larr; Back to blog</Button>
  <h1 class="mt-8 text-2xl md:text-4xl">{content.title}</h1>
  <p class="published-color text-opacity-50 text-sm md:text-base">
    Published on {content.pubDate} by {content.author}
  </p>
  <slot />
  <p class="author-color">Written by {content.author}</p>
  <div class="mt-6">
    <Button href="/blog/" data-brutal-button data-brutal-hover>&larr; Back to blog</Button>
  </div>
</article>

<script src="/contrast-utils.js" is:inline></script>
<script src="/global-color-system.js" is:inline></script>
<script>
  // Apply accessible colors for author and published text with contrasting backgrounds
  function applyRandomColors() {
    const article = document.querySelector('article');

    // Wait for utilities to load if they're not available yet
    if (!window.BrutalColorSystem || !(window as any).ContrastUtils) {
      // Try again after a short delay
      setTimeout(applyRandomColors, 100);
      return;
    }

    if (article) {
      const colors = window.BrutalColorSystem.colors;
      const colorMap = window.BrutalColorSystem.colorMap;

      try {
        // Get accessible color pairs for author and published badges
        const authorPair = (window as any).ContrastUtils.getRandomAccessibleTextPair(
          colors,
          colorMap
        );
        const publishedPair = (window as any).ContrastUtils.getRandomAccessibleTextPair(
          colors,
          colorMap
        );

        // Set CSS custom properties with accessible colors
        article.style.setProperty('--authorColor', authorPair.foreground);
        article.style.setProperty('--authorBgColor', authorPair.background);
        article.style.setProperty('--publishedColor', publishedPair.foreground);
        article.style.setProperty('--publishedBgColor', publishedPair.background);
      } catch (error) {
        console.warn('Error applying accessible colors, falling back to default:', error);
        // Fallback to black on white
        article.style.setProperty('--authorColor', '#000000');
        article.style.setProperty('--authorBgColor', '#ffffff');
        article.style.setProperty('--publishedColor', '#000000');
        article.style.setProperty('--publishedBgColor', '#ffffff');
      }
    }
  }

  // Apply on initial load
  document.addEventListener('DOMContentLoaded', applyRandomColors);

  // Also apply on Astro page loads (for SPA navigation)
  document.addEventListener('astro:page-load', applyRandomColors);

  // Listen for color change events from the palette button
  window.addEventListener('changeColors', applyRandomColors);
</script>
