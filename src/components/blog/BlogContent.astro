---
import { Button } from '@eliancodes/brutal-ui';

interface Props {
  content: any;
}

const { content } = Astro.props;
---

<style>
  .author-color {
    color: var(--authorColor, #ff0000);
    background-color: var(--authorBgColor, #ffffff);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    border: 2px solid #000000;
    display: inline-block;
    font-weight: 600;
  }

  .author-color:hover {
    opacity: 0.8;
  }

  .published-color {
    color: var(--publishedColor, #0000ff);
    background-color: var(--publishedBgColor, #ffffff);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    border: 2px solid #000000;
    display: inline-block;
    font-weight: 600;
  }

  .published-color:hover {
    opacity: 0.8;
  }
</style>

<article class="prose-slate w-sm md:w-prose md:prose poppins">
  <Button href="/blog/" data-brutal-button data-brutal-hover>&larr; Back to blog</Button>
  <h1 class="mt-8 text-2xl md:text-4xl">{content.title}</h1>
  <p class="published-color text-opacity-50 text-sm md:text-base">
    Published on {content.pubDate} by {content.author}
  </p>
  <slot />
  <p class="author-color">Written by {content.author}</p>
  <div class="mt-6">
    <Button href="/blog/" data-brutal-button data-brutal-hover>&larr; Back to blog</Button>
  </div>
</article>

<script src="/global-color-system.js" is:inline></script>
<script>
  // Apply random colors for author and published text with contrasting backgrounds
  function applyRandomColors() {
    const article = document.querySelector('article');
    if (article && window.BrutalColorSystem) {
      const colors = window.BrutalColorSystem.colors;
      const colorMap = window.BrutalColorSystem.colorMap;

      // Generate random colors for text
      const authorColor = colors[Math.floor(Math.random() * colors.length)];
      const publishedColor = colors[Math.floor(Math.random() * colors.length)];

      // Generate contrasting background colors (avoid same color as text)
      let authorBgColor = colors[Math.floor(Math.random() * colors.length)];
      while (authorBgColor === authorColor) {
        authorBgColor = colors[Math.floor(Math.random() * colors.length)];
      }

      let publishedBgColor = colors[Math.floor(Math.random() * colors.length)];
      while (publishedBgColor === publishedColor) {
        publishedBgColor = colors[Math.floor(Math.random() * colors.length)];
      }

      // Set CSS custom properties
      article.style.setProperty('--authorColor', colorMap[authorColor]);
      article.style.setProperty('--authorBgColor', colorMap[authorBgColor]);
      article.style.setProperty('--publishedColor', colorMap[publishedColor]);
      article.style.setProperty('--publishedBgColor', colorMap[publishedBgColor]);
    }
  }

  // Apply on initial load
  document.addEventListener('DOMContentLoaded', applyRandomColors);

  // Also apply on Astro page loads (for SPA navigation)
  document.addEventListener('astro:page-load', applyRandomColors);

  // Listen for color change events from the palette button
  window.addEventListener('changeColors', applyRandomColors);
</script>
