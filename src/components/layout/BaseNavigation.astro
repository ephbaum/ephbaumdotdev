---
import ColorChangeButton from '../ColorChangeButton.astro';

interface Props {
  pageTitle?: string;
}

const navigationItems = [
  { name: 'Home', url: '/', icon: 'i-uil-home', title: 'Go to Home' },
  {
    name: 'Posts',
    url: '/blog/',
    icon: 'i-uil-newspaper',
    title: "View this blog's posts",
  },
];

const socialIcons = [
  {
    name: 'GitHub',
    url: 'https://github.com/ephbaum',
    icon: 'i-uil-github-alt',
    title: 'See @EphBaum on GitHub',
  },
  {
    name: 'LinkedIn',
    url: 'https://www.linkedin.com/in/ephbaum',
    icon: 'i-uil-linkedin-alt',
    title: 'See @EphBaum on LinkedIn',
  },
  {
    name: 'Personal Blog',
    url: 'https://ephwords.com',
    icon: 'i-uil-file-edit-alt',
    title: 'Read other Eph words',
  },
  {
    name: 'Buy Me a Kombucha',
    url: 'https://buymeacoffee.com/ephbaum',
    icon: 'i-uil-coffee',
    title: 'Buy Eph a Kombucha',
  },
];

const { pageTitle } = Astro.props;
---

<header class="border-b-4 border-black flex justify-between p-6 items-center">
  {pageTitle && <h1 class="hidden">{pageTitle}</h1>}
  <a href="/" title="Back to Home">
    <p class="righteous text-3xl md:text-4xl lg:text-5xl">eph baum dot dev</p>
  </a>
  <nav class="hidden md:inline-block">
    <h2 class="hidden">Navigation</h2>
    <ul class="flex gap-3 md:gap-4 lg:gap-6 poppins">
      {
        navigationItems.map((item) => (
          <li>
            <a
              class="hover:underline transition-all duration-150 ease-in-out"
              href={item.url}
              title={item.title}
              data-analytics-menu-nav
              data-destination={item.name.toLowerCase()}
              data-destination-url={item.url}
            >
              <div class:list={[item.icon, 'w-6 h-6']} />
            </a>
          </li>
        ))
      }
      {
        socialIcons.map((item) => (
          <li>
            <a
              href={item.url}
              class="hover:underline transition-all duration-150 ease-in-out"
              target="_blank"
              title={item.title}
              data-analytics-external-link
              data-destination-domain={
                item.url.startsWith('http') ? new URL(item.url).hostname : 'internal'
              }
              data-destination-url={item.url}
              data-source-context="header"
            >
              <div class:list={[item.icon, 'w-6 h-6']} />
            </a>
          </li>
        ))
      }
      <li>
        <ColorChangeButton />
      </li>
    </ul>
  </nav>
  <nav class="md:hidden">
    <h2 class="hidden">Mobile Navigation</h2>
    <ul class="flex gap-4 items-center">
      <li>
        <a
          href="/"
          class="hover:underline transition-all duration-150 ease-in-out"
          title="Go to Home"
        >
          <div class="i-uil-home w-6 h-6"></div>
        </a>
      </li>
      <li>
        <a
          href="/blog/"
          class="hover:underline transition-all duration-150 ease-in-out"
          title="View this blog's posts"
        >
          <div class="i-uil-newspaper w-6 h-6"></div>
        </a>
      </li>
      <li>
        <ColorChangeButton />
      </li>
    </ul>
  </nav>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Track menu navigation clicks
    const menuNavLinks = document.querySelectorAll('[data-analytics-menu-nav]');
    menuNavLinks.forEach((link) => {
      link.addEventListener('click', () => {
        if ((window as any).trackEvent) {
          const destination = link.getAttribute('data-destination');
          const destinationUrl = link.getAttribute('data-destination-url');

          (window as any).trackEvent('menu_navigation', {
            action: 'navigate',
            component: 'main_navigation',
            destination: destination,
            destination_url: destinationUrl,
          });
        }
      });
    });

    // Track external link clicks
    const externalLinks = document.querySelectorAll('[data-analytics-external-link]');
    externalLinks.forEach((link) => {
      link.addEventListener('click', () => {
        if ((window as any).trackEvent) {
          const destinationDomain = link.getAttribute('data-destination-domain');
          const destinationUrl = link.getAttribute('data-destination-url');
          const sourceContext = link.getAttribute('data-source-context');

          (window as any).trackEvent('external_link_click', {
            action: 'click_external_link',
            component: 'content_link',
            destination_domain: destinationDomain,
            destination_url: destinationUrl,
            source_context: sourceContext,
          });
        }
      });
    });
  });
</script>
